///
//  Cylinder.cpp
//


#include <iostream>
#include <cmath>
using namespace std;

#include "Canvas.h"
#include "Cylinder.h"
#include "Lighting.h"
#include "Textures.h"
#include "Viewing.h"

/*
** The Cylinder
*/

//
// Each group of three values specifies a Cylinder vertex
//
// These values double as surface normals, because the Cylinder is
// centered at (0,0,0).
//
//
// Each group of three values specifies a cylinder vertex
//
float cylinderVertices[] = {
   0.000000f,  -0.500000f,   0.500000f,  0.000000f,  -0.500000f,   0.000000f,
   0.293764f,  -0.500000f,   0.404602f,  0.293764f,  -0.500000f,   0.404602f,
   0.000000f,  -0.500000f,   0.000000f,  0.475430f,  -0.500000f,   0.154811f,
   0.475430f,  -0.500000f,   0.154811f,  0.000000f,  -0.500000f,   0.000000f,
   0.475676f,  -0.500000f,  -0.154054f,  0.475676f,  -0.500000f,  -0.154054f,
   0.000000f,  -0.500000f,   0.000000f,  0.294408f,  -0.500000f,  -0.404134f,
   0.294408f,  -0.500000f,  -0.404134f,  0.000000f,  -0.500000f,   0.000000f,
   0.000796f,  -0.500000f,  -0.499999f,  0.000796f,  -0.500000f,  -0.499999f,
   0.000000f,  -0.500000f,   0.000000f, -0.293119f,  -0.500000f,  -0.405069f,
  -0.293119f,  -0.500000f,  -0.405069f,  0.000000f,  -0.500000f,   0.000000f,
  -0.475183f,  -0.500000f,  -0.155568f, -0.475183f,  -0.500000f,  -0.155568f,
   0.000000f,  -0.500000f,   0.000000f, -0.475920f,  -0.500000f,   0.153296f,
  -0.475920f,  -0.500000f,   0.153296f,  0.000000f,  -0.500000f,   0.000000f,
  -0.295051f,  -0.500000f,   0.403664f, -0.295051f,  -0.500000f,   0.403664f,
   0.000000f,  -0.500000f,   0.000000f, -0.001592f,  -0.500000f,   0.499997f,
   0.000000f,  -0.500000f,   0.500000f,  0.293764f,  -0.500000f,   0.404602f,
   0.000000f,  -0.400000f,   0.500000f,  0.293764f,  -0.500000f,   0.404602f,
   0.293764f,  -0.400000f,   0.404602f,  0.000000f,  -0.400000f,   0.500000f,
   0.293764f,  -0.500000f,   0.404602f,  0.475430f,  -0.500000f,   0.154811f,
   0.293764f,  -0.400000f,   0.404602f,  0.475430f,  -0.500000f,   0.154811f,
   0.475430f,  -0.400000f,   0.154811f,  0.293764f,  -0.400000f,   0.404602f,
   0.475430f,  -0.500000f,   0.154811f,  0.475676f,  -0.500000f,  -0.154054f,
   0.475430f,  -0.400000f,   0.154811f,  0.475676f,  -0.500000f,  -0.154054f,
   0.475676f,  -0.400000f,  -0.154054f,  0.475430f,  -0.400000f,   0.154811f,
   0.475676f,  -0.500000f,  -0.154054f,  0.294408f,  -0.500000f,  -0.404134f,
   0.475676f,  -0.400000f,  -0.154054f,  0.294408f,  -0.500000f,  -0.404134f,
   0.294408f,  -0.400000f,  -0.404134f,  0.475676f,  -0.400000f,  -0.154054f,
   0.294408f,  -0.500000f,  -0.404134f,  0.000796f,  -0.500000f,  -0.499999f,
   0.294408f,  -0.400000f,  -0.404134f,  0.000796f,  -0.500000f,  -0.499999f,
   0.000796f,  -0.400000f,  -0.499999f,  0.294408f,  -0.400000f,  -0.404134f,
   0.000796f,  -0.500000f,  -0.499999f, -0.293119f,  -0.500000f,  -0.405069f,
   0.000796f,  -0.400000f,  -0.499999f, -0.293119f,  -0.500000f,  -0.405069f,
  -0.293119f,  -0.400000f,  -0.405069f,  0.000796f,  -0.400000f,  -0.499999f,
  -0.293119f,  -0.500000f,  -0.405069f, -0.475183f,  -0.500000f,  -0.155568f,
  -0.293119f,  -0.400000f,  -0.405069f, -0.475183f,  -0.500000f,  -0.155568f,
  -0.475183f,  -0.400000f,  -0.155568f, -0.293119f,  -0.400000f,  -0.405069f,
  -0.475183f,  -0.500000f,  -0.155568f, -0.475920f,  -0.500000f,   0.153296f,
  -0.475183f,  -0.400000f,  -0.155568f, -0.475920f,  -0.500000f,   0.153296f,
  -0.475920f,  -0.400000f,   0.153296f, -0.475183f,  -0.400000f,  -0.155568f,
  -0.475920f,  -0.500000f,   0.153296f, -0.295051f,  -0.500000f,   0.403664f,
  -0.475920f,  -0.400000f,   0.153296f, -0.295051f,  -0.500000f,   0.403664f,
  -0.295051f,  -0.400000f,   0.403664f, -0.475920f,  -0.400000f,   0.153296f,
  -0.295051f,  -0.500000f,   0.403664f, -0.001592f,  -0.500000f,   0.499997f,
  -0.295051f,  -0.400000f,   0.403664f, -0.001592f,  -0.500000f,   0.499997f,
  -0.001592f,  -0.400000f,   0.499997f, -0.295051f,  -0.400000f,   0.403664f,
  -0.001592f,  -0.400000f,   0.499997f,  0.292474f,  -0.400000f,   0.405535f,
  -0.001592f,  -0.300000f,   0.499997f,  0.292474f,  -0.400000f,   0.405535f,
   0.292474f,  -0.300000f,   0.405535f, -0.001592f,  -0.300000f,   0.499997f,
   0.292474f,  -0.400000f,   0.405535f,  0.474934f,  -0.400000f,   0.156324f,
   0.292474f,  -0.300000f,   0.405535f,  0.474934f,  -0.400000f,   0.156324f,
   0.474934f,  -0.300000f,   0.156324f,  0.292474f,  -0.300000f,   0.405535f,
   0.474934f,  -0.400000f,   0.156324f,  0.476164f,  -0.400000f,  -0.152539f,
   0.474934f,  -0.300000f,   0.156324f,  0.476164f,  -0.400000f,  -0.152539f,
   0.476164f,  -0.300000f,  -0.152539f,  0.474934f,  -0.300000f,   0.156324f,
   0.476164f,  -0.400000f,  -0.152539f,  0.295693f,  -0.400000f,  -0.403194f,
   0.476164f,  -0.300000f,  -0.152539f,  0.295693f,  -0.400000f,  -0.403194f,
   0.295693f,  -0.300000f,  -0.403194f,  0.476164f,  -0.300000f,  -0.152539f,
   0.295693f,  -0.400000f,  -0.403194f,  0.002388f,  -0.400000f,  -0.499994f,
   0.295693f,  -0.300000f,  -0.403194f,  0.002388f,  -0.400000f,  -0.499994f,
   0.002388f,  -0.300000f,  -0.499994f,  0.295693f,  -0.300000f,  -0.403194f,
   0.002388f,  -0.400000f,  -0.499994f, -0.291828f,  -0.400000f,  -0.406000f,
   0.002388f,  -0.300000f,  -0.499994f, -0.291828f,  -0.400000f,  -0.406000f,
  -0.291828f,  -0.300000f,  -0.406000f,  0.002388f,  -0.300000f,  -0.499994f,
  -0.291828f,  -0.400000f,  -0.406000f, -0.474685f,  -0.400000f,  -0.157080f,
  -0.291828f,  -0.300000f,  -0.406000f, -0.474685f,  -0.400000f,  -0.157080f,
  -0.474685f,  -0.300000f,  -0.157080f, -0.291828f,  -0.300000f,  -0.406000f,
  -0.474685f,  -0.400000f,  -0.157080f, -0.476406f,  -0.400000f,   0.151781f,
  -0.474685f,  -0.300000f,  -0.157080f, -0.476406f,  -0.400000f,   0.151781f,
  -0.476406f,  -0.300000f,   0.151781f, -0.474685f,  -0.300000f,  -0.157080f,
  -0.476406f,  -0.400000f,   0.151781f, -0.296334f,  -0.400000f,   0.402723f,
  -0.476406f,  -0.300000f,   0.151781f, -0.296334f,  -0.400000f,   0.402723f,
  -0.296334f,  -0.300000f,   0.402723f, -0.476406f,  -0.300000f,   0.151781f,
  -0.296334f,  -0.400000f,   0.402723f, -0.003184f,  -0.400000f,   0.499990f,
  -0.296334f,  -0.300000f,   0.402723f, -0.003184f,  -0.400000f,   0.499990f,
  -0.003184f,  -0.300000f,   0.499990f, -0.296334f,  -0.300000f,   0.402723f,
  -0.003184f,  -0.300000f,   0.499990f,  0.291182f,  -0.300000f,   0.406464f,
  -0.003184f,  -0.200000f,   0.499990f,  0.291182f,  -0.300000f,   0.406464f,
   0.291182f,  -0.200000f,   0.406464f, -0.003184f,  -0.200000f,   0.499990f,
   0.291182f,  -0.300000f,   0.406464f,  0.474434f,  -0.300000f,   0.157835f,
   0.291182f,  -0.200000f,   0.406464f,  0.474434f,  -0.300000f,   0.157835f,
   0.474434f,  -0.200000f,   0.157835f,  0.291182f,  -0.200000f,   0.406464f,
   0.474434f,  -0.300000f,   0.157835f,  0.476647f,  -0.300000f,  -0.151022f,
   0.474434f,  -0.200000f,   0.157835f,  0.476647f,  -0.300000f,  -0.151022f,
   0.476647f,  -0.200000f,  -0.151022f,  0.474434f,  -0.200000f,   0.157835f,
   0.476647f,  -0.300000f,  -0.151022f,  0.296975f,  -0.300000f,  -0.402251f,
   0.476647f,  -0.200000f,  -0.151022f,  0.296975f,  -0.300000f,  -0.402251f,
   0.296975f,  -0.200000f,  -0.402251f,  0.476647f,  -0.200000f,  -0.151022f,
   0.296975f,  -0.300000f,  -0.402251f,  0.003979f,  -0.300000f,  -0.499984f,
   0.296975f,  -0.200000f,  -0.402251f,  0.003979f,  -0.300000f,  -0.499984f,
   0.003979f,  -0.200000f,  -0.499984f,  0.296975f,  -0.200000f,  -0.402251f,
   0.003979f,  -0.300000f,  -0.499984f, -0.290534f,  -0.300000f,  -0.406927f,
   0.003979f,  -0.200000f,  -0.499984f, -0.290534f,  -0.300000f,  -0.406927f,
  -0.290534f,  -0.200000f,  -0.406927f,  0.003979f,  -0.200000f,  -0.499984f,
  -0.290534f,  -0.300000f,  -0.406927f, -0.474183f,  -0.300000f,  -0.158590f,
  -0.290534f,  -0.200000f,  -0.406927f, -0.474183f,  -0.300000f,  -0.158590f,
  -0.474183f,  -0.200000f,  -0.158590f, -0.290534f,  -0.200000f,  -0.406927f,
  -0.474183f,  -0.300000f,  -0.158590f, -0.476887f,  -0.300000f,   0.150264f,
  -0.474183f,  -0.200000f,  -0.158590f, -0.476887f,  -0.300000f,   0.150264f,
  -0.476887f,  -0.200000f,   0.150264f, -0.474183f,  -0.200000f,  -0.158590f,
  -0.476887f,  -0.300000f,   0.150264f, -0.297614f,  -0.300000f,   0.401778f,
  -0.476887f,  -0.200000f,   0.150264f, -0.297614f,  -0.300000f,   0.401778f,
  -0.297614f,  -0.200000f,   0.401778f, -0.476887f,  -0.200000f,   0.150264f,
  -0.297614f,  -0.300000f,   0.401778f, -0.004775f,  -0.300000f,   0.499977f,
  -0.297614f,  -0.200000f,   0.401778f, -0.004775f,  -0.300000f,   0.499977f,
  -0.004775f,  -0.200000f,   0.499977f, -0.297614f,  -0.200000f,   0.401778f,
  -0.004775f,  -0.200000f,   0.499977f,  0.289887f,  -0.200000f,   0.407389f,
  -0.004775f,  -0.100000f,   0.499977f,  0.289887f,  -0.200000f,   0.407389f,
   0.289887f,  -0.100000f,   0.407389f, -0.004775f,  -0.100000f,   0.499977f,
   0.289887f,  -0.200000f,   0.407389f,  0.473930f,  -0.200000f,   0.159344f,
   0.289887f,  -0.100000f,   0.407389f,  0.473930f,  -0.200000f,   0.159344f,
   0.473930f,  -0.100000f,   0.159344f,  0.289887f,  -0.100000f,   0.407389f,
   0.473930f,  -0.200000f,   0.159344f,  0.477125f,  -0.200000f,  -0.149505f,
   0.473930f,  -0.100000f,   0.159344f,  0.477125f,  -0.200000f,  -0.149505f,
   0.477125f,  -0.100000f,  -0.149505f,  0.473930f,  -0.100000f,   0.159344f,
   0.477125f,  -0.200000f,  -0.149505f,  0.298253f,  -0.200000f,  -0.401304f,
   0.477125f,  -0.100000f,  -0.149505f,  0.298253f,  -0.200000f,  -0.401304f,
   0.298253f,  -0.100000f,  -0.401304f,  0.477125f,  -0.100000f,  -0.149505f,
   0.298253f,  -0.200000f,  -0.401304f,  0.005571f,  -0.200000f,  -0.499969f,
   0.298253f,  -0.100000f,  -0.401304f,  0.005571f,  -0.200000f,  -0.499969f,
   0.005571f,  -0.100000f,  -0.499969f,  0.298253f,  -0.100000f,  -0.401304f,
   0.005571f,  -0.200000f,  -0.499969f, -0.289238f,  -0.200000f,  -0.407850f,
   0.005571f,  -0.100000f,  -0.499969f, -0.289238f,  -0.200000f,  -0.407850f,
  -0.289238f,  -0.100000f,  -0.407850f,  0.005571f,  -0.100000f,  -0.499969f,
  -0.289238f,  -0.200000f,  -0.407850f, -0.473676f,  -0.200000f,  -0.160098f,
  -0.289238f,  -0.100000f,  -0.407850f, -0.473676f,  -0.200000f,  -0.160098f,
  -0.473676f,  -0.100000f,  -0.160098f, -0.289238f,  -0.100000f,  -0.407850f,
  -0.473676f,  -0.200000f,  -0.160098f, -0.477362f,  -0.200000f,   0.148745f,
  -0.473676f,  -0.100000f,  -0.160098f, -0.477362f,  -0.200000f,   0.148745f,
  -0.477362f,  -0.100000f,   0.148745f, -0.473676f,  -0.100000f,  -0.160098f,
  -0.477362f,  -0.200000f,   0.148745f, -0.298892f,  -0.200000f,   0.400829f,
  -0.477362f,  -0.100000f,   0.148745f, -0.298892f,  -0.200000f,   0.400829f,
  -0.298892f,  -0.100000f,   0.400829f, -0.477362f,  -0.100000f,   0.148745f,
  -0.298892f,  -0.200000f,   0.400829f, -0.006366f,  -0.200000f,   0.499959f,
  -0.298892f,  -0.100000f,   0.400829f, -0.006366f,  -0.200000f,   0.499959f,
  -0.006366f,  -0.100000f,   0.499959f, -0.298892f,  -0.100000f,   0.400829f,
  -0.006366f,  -0.100000f,   0.499959f,  0.288588f,  -0.100000f,   0.408310f,
  -0.006366f,  -0.000000f,   0.499959f,  0.288588f,  -0.100000f,   0.408310f,
   0.288588f,  -0.000000f,   0.408310f, -0.006366f,  -0.000000f,   0.499959f,
   0.288588f,  -0.100000f,   0.408310f,  0.473420f,  -0.100000f,   0.160852f,
   0.288588f,  -0.000000f,   0.408310f,  0.473420f,  -0.100000f,   0.160852f,
   0.473420f,  -0.000000f,   0.160852f,  0.288588f,  -0.000000f,   0.408310f,
   0.473420f,  -0.100000f,   0.160852f,  0.477598f,  -0.100000f,  -0.147985f,
   0.473420f,  -0.000000f,   0.160852f,  0.477598f,  -0.100000f,  -0.147985f,
   0.477598f,  -0.000000f,  -0.147985f,  0.473420f,  -0.000000f,   0.160852f,
   0.477598f,  -0.100000f,  -0.147985f,  0.299529f,  -0.100000f,  -0.400353f,
   0.477598f,  -0.000000f,  -0.147985f,  0.299529f,  -0.100000f,  -0.400353f,
   0.299529f,  -0.000000f,  -0.400353f,  0.477598f,  -0.000000f,  -0.147985f,
   0.299529f,  -0.100000f,  -0.400353f,  0.007162f,  -0.100000f,  -0.499949f,
   0.299529f,  -0.000000f,  -0.400353f,  0.007162f,  -0.100000f,  -0.499949f,
   0.007162f,  -0.000000f,  -0.499949f,  0.299529f,  -0.000000f,  -0.400353f,
   0.007162f,  -0.100000f,  -0.499949f, -0.287938f,  -0.100000f,  -0.408768f,
   0.007162f,  -0.000000f,  -0.499949f, -0.287938f,  -0.100000f,  -0.408768f,
  -0.287938f,  -0.000000f,  -0.408768f,  0.007162f,  -0.000000f,  -0.499949f,
  -0.287938f,  -0.100000f,  -0.408768f, -0.473164f,  -0.100000f,  -0.161605f,
  -0.287938f,  -0.000000f,  -0.408768f, -0.473164f,  -0.100000f,  -0.161605f,
  -0.473164f,  -0.000000f,  -0.161605f, -0.287938f,  -0.000000f,  -0.408768f,
  -0.473164f,  -0.100000f,  -0.161605f, -0.477833f,  -0.100000f,   0.147225f,
  -0.473164f,  -0.000000f,  -0.161605f, -0.477833f,  -0.100000f,   0.147225f,
  -0.477833f,  -0.000000f,   0.147225f, -0.473164f,  -0.000000f,  -0.161605f,
  -0.477833f,  -0.100000f,   0.147225f, -0.300166f,  -0.100000f,   0.399876f,
  -0.477833f,  -0.000000f,   0.147225f, -0.300166f,  -0.100000f,   0.399876f,
  -0.300166f,  -0.000000f,   0.399876f, -0.477833f,  -0.000000f,   0.147225f,
  -0.300166f,  -0.100000f,   0.399876f, -0.007957f,  -0.100000f,   0.499937f,
  -0.300166f,  -0.000000f,   0.399876f, -0.007957f,  -0.100000f,   0.499937f,
  -0.007957f,  -0.000000f,   0.499937f, -0.300166f,  -0.000000f,   0.399876f,
  -0.007957f,  -0.000000f,   0.499937f,  0.287288f,  -0.000000f,   0.409226f,
  -0.007957f,   0.100000f,   0.499937f,  0.287288f,  -0.000000f,   0.409226f,
   0.287288f,   0.100000f,   0.409226f, -0.007957f,   0.100000f,   0.499937f,
   0.287288f,  -0.000000f,   0.409226f,  0.472905f,  -0.000000f,   0.162359f,
   0.287288f,   0.100000f,   0.409226f,  0.472905f,  -0.000000f,   0.162359f,
   0.472905f,   0.100000f,   0.162359f,  0.287288f,   0.100000f,   0.409226f,
   0.472905f,  -0.000000f,   0.162359f,  0.478068f,  -0.000000f,  -0.146463f,
   0.472905f,   0.100000f,   0.162359f,  0.478068f,  -0.000000f,  -0.146463f,
   0.478068f,   0.100000f,  -0.146463f,  0.472905f,   0.100000f,   0.162359f,
   0.478068f,  -0.000000f,  -0.146463f,  0.300804f,  -0.000000f,  -0.399396f,
   0.478068f,   0.100000f,  -0.146463f,  0.300804f,  -0.000000f,  -0.399396f,
   0.300804f,   0.100000f,  -0.399396f,  0.478068f,   0.100000f,  -0.146463f,
   0.300804f,  -0.000000f,  -0.399396f,  0.008757f,  -0.000000f,  -0.499923f,
   0.300804f,   0.100000f,  -0.399396f,  0.008757f,  -0.000000f,  -0.499923f,
   0.008757f,   0.100000f,  -0.499923f,  0.300804f,   0.100000f,  -0.399396f,
   0.008757f,  -0.000000f,  -0.499923f, -0.286632f,  -0.000000f,  -0.409685f,
   0.008757f,   0.100000f,  -0.499923f, -0.286632f,  -0.000000f,  -0.409685f,
  -0.286632f,   0.100000f,  -0.409685f,  0.008757f,   0.100000f,  -0.499923f,
  -0.286632f,  -0.000000f,  -0.409685f, -0.472645f,  -0.000000f,  -0.163116f,
  -0.286632f,   0.100000f,  -0.409685f, -0.472645f,  -0.000000f,  -0.163116f,
  -0.472645f,   0.100000f,  -0.163116f, -0.286632f,   0.100000f,  -0.409685f,
  -0.472645f,  -0.000000f,  -0.163116f, -0.478301f,  -0.000000f,   0.145697f,
  -0.472645f,   0.100000f,  -0.163116f, -0.478301f,  -0.000000f,   0.145697f,
  -0.478301f,   0.100000f,   0.145697f, -0.472645f,   0.100000f,  -0.163116f,
  -0.478301f,  -0.000000f,   0.145697f, -0.301443f,  -0.000000f,   0.398914f,
  -0.478301f,   0.100000f,   0.145697f, -0.301443f,  -0.000000f,   0.398914f,
  -0.301443f,   0.100000f,   0.398914f, -0.478301f,   0.100000f,   0.145697f,
  -0.301443f,  -0.000000f,   0.398914f, -0.009557f,  -0.000000f,   0.499909f,
  -0.301443f,   0.100000f,   0.398914f, -0.009557f,  -0.000000f,   0.499909f,
  -0.009557f,   0.100000f,   0.499909f, -0.301443f,   0.100000f,   0.398914f,
  -0.009557f,   0.100000f,   0.499909f,  0.285976f,   0.100000f,   0.410144f,
  -0.009557f,   0.200000f,   0.499909f,  0.285976f,   0.100000f,   0.410144f,
   0.285976f,   0.200000f,   0.410144f, -0.009557f,   0.200000f,   0.499909f,
   0.285976f,   0.100000f,   0.410144f,  0.472383f,   0.100000f,   0.163872f,
   0.285976f,   0.200000f,   0.410144f,  0.472383f,   0.100000f,   0.163872f,
   0.472383f,   0.200000f,   0.163872f,  0.285976f,   0.200000f,   0.410144f,
   0.472383f,   0.100000f,   0.163872f,  0.478534f,   0.100000f,  -0.144931f,
   0.472383f,   0.200000f,   0.163872f,  0.478534f,   0.100000f,  -0.144931f,
   0.478534f,   0.200000f,  -0.144931f,  0.472383f,   0.200000f,   0.163872f,
   0.478534f,   0.100000f,  -0.144931f,  0.302081f,   0.100000f,  -0.398431f,
   0.478534f,   0.200000f,  -0.144931f,  0.302081f,   0.100000f,  -0.398431f,
   0.302081f,   0.200000f,  -0.398431f,  0.478534f,   0.200000f,  -0.144931f,
   0.302081f,   0.100000f,  -0.398431f,  0.010357f,   0.100000f,  -0.499893f,
   0.302081f,   0.200000f,  -0.398431f,  0.010357f,   0.100000f,  -0.499893f,
   0.010357f,   0.200000f,  -0.499893f,  0.302081f,   0.200000f,  -0.398431f,
   0.010357f,   0.100000f,  -0.499893f, -0.285319f,   0.100000f,  -0.410601f,
   0.010357f,   0.200000f,  -0.499893f, -0.285319f,   0.100000f,  -0.410601f,
  -0.285319f,   0.200000f,  -0.410601f,  0.010357f,   0.200000f,  -0.499893f,
  -0.285319f,   0.100000f,  -0.410601f, -0.472120f,   0.100000f,  -0.164628f,
  -0.285319f,   0.200000f,  -0.410601f, -0.472120f,   0.100000f,  -0.164628f,
  -0.472120f,   0.200000f,  -0.164628f, -0.285319f,   0.200000f,  -0.410601f,
  -0.472120f,   0.100000f,  -0.164628f, -0.478766f,   0.100000f,   0.144165f,
  -0.472120f,   0.200000f,  -0.164628f, -0.478766f,   0.100000f,   0.144165f,
  -0.478766f,   0.200000f,   0.144165f, -0.472120f,   0.200000f,  -0.164628f,
  -0.478766f,   0.100000f,   0.144165f, -0.302719f,   0.100000f,   0.397946f,
  -0.478766f,   0.200000f,   0.144165f, -0.302719f,   0.100000f,   0.397946f,
  -0.302719f,   0.200000f,   0.397946f, -0.478766f,   0.200000f,   0.144165f,
  -0.302719f,   0.100000f,   0.397946f, -0.011158f,   0.100000f,   0.499875f,
  -0.302719f,   0.200000f,   0.397946f, -0.011158f,   0.100000f,   0.499875f,
  -0.011158f,   0.200000f,   0.499875f, -0.302719f,   0.200000f,   0.397946f,
  -0.011158f,   0.200000f,   0.499875f,  0.284661f,   0.200000f,   0.411057f,
  -0.011158f,   0.300000f,   0.499875f,  0.284661f,   0.200000f,   0.411057f,
   0.284661f,   0.300000f,   0.411057f, -0.011158f,   0.300000f,   0.499875f,
   0.284661f,   0.200000f,   0.411057f,  0.471856f,   0.200000f,   0.165384f,
   0.284661f,   0.300000f,   0.411057f,  0.471856f,   0.200000f,   0.165384f,
   0.471856f,   0.300000f,   0.165384f,  0.284661f,   0.300000f,   0.411057f,
   0.471856f,   0.200000f,   0.165384f,  0.478996f,   0.200000f,  -0.143398f,
   0.471856f,   0.300000f,   0.165384f,  0.478996f,   0.200000f,  -0.143398f,
   0.478996f,   0.300000f,  -0.143398f,  0.471856f,   0.300000f,   0.165384f,
   0.478996f,   0.200000f,  -0.143398f,  0.303355f,   0.200000f,  -0.397461f,
   0.478996f,   0.300000f,  -0.143398f,  0.303355f,   0.200000f,  -0.397461f,
   0.303355f,   0.300000f,  -0.397461f,  0.478996f,   0.300000f,  -0.143398f,
   0.303355f,   0.200000f,  -0.397461f,  0.011958f,   0.200000f,  -0.499857f,
   0.303355f,   0.300000f,  -0.397461f,  0.011958f,   0.200000f,  -0.499857f,
   0.011958f,   0.300000f,  -0.499857f,  0.303355f,   0.300000f,  -0.397461f,
   0.011958f,   0.200000f,  -0.499857f, -0.284003f,   0.200000f,  -0.411512f,
   0.011958f,   0.300000f,  -0.499857f, -0.284003f,   0.200000f,  -0.411512f,
  -0.284003f,   0.300000f,  -0.411512f,  0.011958f,   0.300000f,  -0.499857f,
  -0.284003f,   0.200000f,  -0.411512f, -0.471591f,   0.200000f,  -0.166139f,
  -0.284003f,   0.300000f,  -0.411512f, -0.471591f,   0.200000f,  -0.166139f,
  -0.471591f,   0.300000f,  -0.166139f, -0.284003f,   0.300000f,  -0.411512f,
  -0.471591f,   0.200000f,  -0.166139f, -0.479225f,   0.200000f,   0.142631f,
  -0.471591f,   0.300000f,  -0.166139f, -0.479225f,   0.200000f,   0.142631f,
  -0.479225f,   0.300000f,   0.142631f, -0.471591f,   0.300000f,  -0.166139f,
  -0.479225f,   0.200000f,   0.142631f, -0.303991f,   0.200000f,   0.396975f,
  -0.479225f,   0.300000f,   0.142631f, -0.303991f,   0.200000f,   0.396975f,
  -0.303991f,   0.300000f,   0.396975f, -0.479225f,   0.300000f,   0.142631f,
  -0.303991f,   0.200000f,   0.396975f, -0.012758f,   0.200000f,   0.499837f,
  -0.303991f,   0.300000f,   0.396975f, -0.012758f,   0.200000f,   0.499837f,
  -0.012758f,   0.300000f,   0.499837f, -0.303991f,   0.300000f,   0.396975f,
  -0.012758f,   0.300000f,   0.499837f,  0.283344f,   0.300000f,   0.411967f,
  -0.012758f,   0.400000f,   0.499837f,  0.283344f,   0.300000f,   0.411967f,
   0.283344f,   0.400000f,   0.411967f, -0.012758f,   0.400000f,   0.499837f,
   0.283344f,   0.300000f,   0.411967f,  0.471324f,   0.300000f,   0.166894f,
   0.283344f,   0.400000f,   0.411967f,  0.471324f,   0.300000f,   0.166894f,
   0.471324f,   0.400000f,   0.166894f,  0.283344f,   0.400000f,   0.411967f,
   0.471324f,   0.300000f,   0.166894f,  0.479452f,   0.300000f,  -0.141864f,
   0.471324f,   0.400000f,   0.166894f,  0.479452f,   0.300000f,  -0.141864f,
   0.479452f,   0.400000f,  -0.141864f,  0.471324f,   0.400000f,   0.166894f,
   0.479452f,   0.300000f,  -0.141864f,  0.304626f,   0.300000f,  -0.396488f,
   0.479452f,   0.400000f,  -0.141864f,  0.304626f,   0.300000f,  -0.396488f,
   0.304626f,   0.400000f,  -0.396488f,  0.479452f,   0.400000f,  -0.141864f,
   0.304626f,   0.300000f,  -0.396488f,  0.013558f,   0.300000f,  -0.499816f,
   0.304626f,   0.400000f,  -0.396488f,  0.013558f,   0.300000f,  -0.499816f,
   0.013558f,   0.400000f,  -0.499816f,  0.304626f,   0.400000f,  -0.396488f,
   0.013558f,   0.300000f,  -0.499816f, -0.282684f,   0.300000f,  -0.412420f,
   0.013558f,   0.400000f,  -0.499816f, -0.282684f,   0.300000f,  -0.412420f,
  -0.282684f,   0.400000f,  -0.412420f,  0.013558f,   0.400000f,  -0.499816f,
  -0.282684f,   0.300000f,  -0.412420f, -0.471056f,   0.300000f,  -0.167648f,
  -0.282684f,   0.400000f,  -0.412420f, -0.471056f,   0.300000f,  -0.167648f,
  -0.471056f,   0.400000f,  -0.167648f, -0.282684f,   0.400000f,  -0.412420f,
  -0.471056f,   0.300000f,  -0.167648f, -0.479679f,   0.300000f,   0.141096f,
  -0.471056f,   0.400000f,  -0.167648f, -0.479679f,   0.300000f,   0.141096f,
  -0.479679f,   0.400000f,   0.141096f, -0.471056f,   0.400000f,  -0.167648f,
  -0.479679f,   0.300000f,   0.141096f, -0.305261f,   0.300000f,   0.396000f,
  -0.479679f,   0.400000f,   0.141096f, -0.305261f,   0.300000f,   0.396000f,
  -0.305261f,   0.400000f,   0.396000f, -0.479679f,   0.400000f,   0.141096f,
  -0.305261f,   0.300000f,   0.396000f, -0.014358f,   0.300000f,   0.499794f,
  -0.305261f,   0.400000f,   0.396000f, -0.014358f,   0.300000f,   0.499794f,
  -0.014358f,   0.400000f,   0.499794f, -0.305261f,   0.400000f,   0.396000f,
  -0.014358f,   0.400000f,   0.499794f,  0.282023f,   0.400000f,   0.412872f,
  -0.014358f,   0.500000f,   0.499794f,  0.282023f,   0.400000f,   0.412872f,
   0.282023f,   0.500000f,   0.412872f, -0.014358f,   0.500000f,   0.499794f,
   0.282023f,   0.400000f,   0.412872f,  0.470787f,   0.400000f,   0.168402f,
   0.282023f,   0.500000f,   0.412872f,  0.470787f,   0.400000f,   0.168402f,
   0.470787f,   0.500000f,   0.168402f,  0.282023f,   0.500000f,   0.412872f,
   0.470787f,   0.400000f,   0.168402f,  0.479904f,   0.400000f,  -0.140328f,
   0.470787f,   0.500000f,   0.168402f,  0.479904f,   0.400000f,  -0.140328f,
   0.479904f,   0.500000f,  -0.140328f,  0.470787f,   0.500000f,   0.168402f,
   0.479904f,   0.400000f,  -0.140328f,  0.305894f,   0.400000f,  -0.395511f,
   0.479904f,   0.500000f,  -0.140328f,  0.305894f,   0.400000f,  -0.395511f,
   0.305894f,   0.500000f,  -0.395511f,  0.479904f,   0.500000f,  -0.140328f,
   0.305894f,   0.400000f,  -0.395511f,  0.015158f,   0.400000f,  -0.499770f,
   0.305894f,   0.500000f,  -0.395511f,  0.015158f,   0.400000f,  -0.499770f,
   0.015158f,   0.500000f,  -0.499770f,  0.305894f,   0.500000f,  -0.395511f,
   0.015158f,   0.400000f,  -0.499770f, -0.281362f,   0.400000f,  -0.413323f,
   0.015158f,   0.500000f,  -0.499770f, -0.281362f,   0.400000f,  -0.413323f,
  -0.281362f,   0.500000f,  -0.413323f,  0.015158f,   0.500000f,  -0.499770f,
  -0.281362f,   0.400000f,  -0.413323f, -0.470517f,   0.400000f,  -0.169155f,
  -0.281362f,   0.500000f,  -0.413323f, -0.470517f,   0.400000f,  -0.169155f,
  -0.470517f,   0.500000f,  -0.169155f, -0.281362f,   0.500000f,  -0.413323f,
  -0.470517f,   0.400000f,  -0.169155f, -0.480128f,   0.400000f,   0.139560f,
  -0.470517f,   0.500000f,  -0.169155f, -0.480128f,   0.400000f,   0.139560f,
  -0.480128f,   0.500000f,   0.139560f, -0.470517f,   0.500000f,  -0.169155f,
  -0.480128f,   0.400000f,   0.139560f, -0.306527f,   0.400000f,   0.395020f,
  -0.480128f,   0.500000f,   0.139560f, -0.306527f,   0.400000f,   0.395020f,
  -0.306527f,   0.500000f,   0.395020f, -0.480128f,   0.500000f,   0.139560f,
  -0.306527f,   0.400000f,   0.395020f, -0.015959f,   0.400000f,   0.499745f,
  -0.306527f,   0.500000f,   0.395020f, -0.015959f,   0.400000f,   0.499745f,
  -0.015959f,   0.500000f,   0.499745f, -0.306527f,   0.500000f,   0.395020f,
   0.293764f,   0.500000f,   0.404602f,  0.000000f,   0.500000f,   0.000000f,
   0.000000f,   0.500000f,   0.500000f,  0.475430f,   0.500000f,   0.154811f,
   0.000000f,   0.500000f,   0.000000f,  0.293764f,   0.500000f,   0.404602f,
   0.475676f,   0.500000f,  -0.154054f,  0.000000f,   0.500000f,   0.000000f,
   0.475430f,   0.500000f,   0.154811f,  0.294408f,   0.500000f,  -0.404134f,
   0.000000f,   0.500000f,   0.000000f,  0.475676f,   0.500000f,  -0.154054f,
   0.000796f,   0.500000f,  -0.499999f,  0.000000f,   0.500000f,   0.000000f,
   0.294408f,   0.500000f,  -0.404134f, -0.293119f,   0.500000f,  -0.405069f,
   0.000000f,   0.500000f,   0.000000f,  0.000796f,   0.500000f,  -0.499999f,
  -0.475183f,   0.500000f,  -0.155568f,  0.000000f,   0.500000f,   0.000000f,
  -0.293119f,   0.500000f,  -0.405069f, -0.475920f,   0.500000f,   0.153296f,
   0.000000f,   0.500000f,   0.000000f, -0.475183f,   0.500000f,  -0.155568f,
  -0.295051f,   0.500000f,   0.403664f,  0.000000f,   0.500000f,   0.000000f,
  -0.475920f,   0.500000f,   0.153296f, -0.001592f,   0.500000f,   0.499997f,
   0.000000f,   0.500000f,   0.000000f, -0.295051f,   0.500000f,   0.403664f
};

int cylinderVerticesLength = sizeof(cylinderVertices) / sizeof(float);

//
// Each group of three values specifies a cylinder triangle
//
int cylinderElements[] = {
	 0,     1,     2,     3,     4,     5,     6,     7,     8,     9,
	10,    11,    12,    13,    14,    15,    16,    17,    18,    19,
	20,    21,    22,    23,    24,    25,    26,    27,    28,    29,
	30,    31,    32,    33,    34,    35,    36,    37,    38,    39,
	40,    41,    42,    43,    44,    45,    46,    47,    48,    49,
	50,    51,    52,    53,    54,    55,    56,    57,    58,    59,
	60,    61,    62,    63,    64,    65,    66,    67,    68,    69,
	70,    71,    72,    73,    74,    75,    76,    77,    78,    79,
	80,    81,    82,    83,    84,    85,    86,    87,    88,    89,
	90,    91,    92,    93,    94,    95,    96,    97,    98,    99,
   100,   101,   102,   103,   104,   105,   106,   107,   108,   109,
   110,   111,   112,   113,   114,   115,   116,   117,   118,   119,
   120,   121,   122,   123,   124,   125,   126,   127,   128,   129,
   130,   131,   132,   133,   134,   135,   136,   137,   138,   139,
   140,   141,   142,   143,   144,   145,   146,   147,   148,   149,
   150,   151,   152,   153,   154,   155,   156,   157,   158,   159,
   160,   161,   162,   163,   164,   165,   166,   167,   168,   169,
   170,   171,   172,   173,   174,   175,   176,   177,   178,   179,
   180,   181,   182,   183,   184,   185,   186,   187,   188,   189,
   190,   191,   192,   193,   194,   195,   196,   197,   198,   199,
   200,   201,   202,   203,   204,   205,   206,   207,   208,   209,
   210,   211,   212,   213,   214,   215,   216,   217,   218,   219,
   220,   221,   222,   223,   224,   225,   226,   227,   228,   229,
   230,   231,   232,   233,   234,   235,   236,   237,   238,   239,
   240,   241,   242,   243,   244,   245,   246,   247,   248,   249,
   250,   251,   252,   253,   254,   255,   256,   257,   258,   259,
   260,   261,   262,   263,   264,   265,   266,   267,   268,   269,
   270,   271,   272,   273,   274,   275,   276,   277,   278,   279,
   280,   281,   282,   283,   284,   285,   286,   287,   288,   289,
   290,   291,   292,   293,   294,   295,   296,   297,   298,   299,
   300,   301,   302,   303,   304,   305,   306,   307,   308,   309,
   310,   311,   312,   313,   314,   315,   316,   317,   318,   319,
   320,   321,   322,   323,   324,   325,   326,   327,   328,   329,
   330,   331,   332,   333,   334,   335,   336,   337,   338,   339,
   340,   341,   342,   343,   344,   345,   346,   347,   348,   349,
   350,   351,   352,   353,   354,   355,   356,   357,   358,   359,
   360,   361,   362,   363,   364,   365,   366,   367,   368,   369,
   370,   371,   372,   373,   374,   375,   376,   377,   378,   379,
   380,   381,   382,   383,   384,   385,   386,   387,   388,   389,
   390,   391,   392,   393,   394,   395,   396,   397,   398,   399,
   400,   401,   402,   403,   404,   405,   406,   407,   408,   409,
   410,   411,   412,   413,   414,   415,   416,   417,   418,   419,
   420,   421,   422,   423,   424,   425,   426,   427,   428,   429,
   430,   431,   432,   433,   434,   435,   436,   437,   438,   439,
   440,   441,   442,   443,   444,   445,   446,   447,   448,   449,
   450,   451,   452,   453,   454,   455,   456,   457,   458,   459,
   460,   461,   462,   463,   464,   465,   466,   467,   468,   469,
   470,   471,   472,   473,   474,   475,   476,   477,   478,   479,
   480,   481,   482,   483,   484,   485,   486,   487,   488,   489,
   490,   491,   492,   493,   494,   495,   496,   497,   498,   499,
   500,   501,   502,   503,   504,   505,   506,   507,   508,   509,
   510,   511,   512,   513,   514,   515,   516,   517,   518,   519,
   520,   521,   522,   523,   524,   525,   526,   527,   528,   529,
   530,   531,   532,   533,   534,   535,   536,   537,   538,   539,
   540,   541,   542,   543,   544,   545,   546,   547,   548,   549,
   550,   551,   552,   553,   554,   555,   556,   557,   558,   559,
   560,   561,   562,   563,   564,   565,   566,   567,   568,   569,
   570,   571,   572,   573,   574,   575,   576,   577,   578,   579,
   580,   581,   582,   583,   584,   585,   586,   587,   588,   589,
   590,   591,   592,   593,   594,   595,   596,   597,   598,   599,
   600,   601,   602,   603,   604,   605,   606,   607,   608,   609,
   610,   611,   612,   613,   614,   615,   616,   617,   618,   619,
   620,   621,   622,   623,   624,   625,   626,   627,   628,   629,
   630,   631,   632,   633,   634,   635,   636,   637,   638,   639,
   640,   641,   642,   643,   644,   645,   646,   647,   648,   649,
   650,   651,   652,   653,   654,   655,   656,   657,   658,   659
};

int cylinderElementsLength = sizeof(cylinderElements) / sizeof(int);


//
// makeCylinder() - create a Cylinder object
//
void makeCylinder(Canvas &C)
{
	int i;

	for (i = 0; i < cylinderElementsLength - 2; i += 3) {

		// Calculate the base indices of the three vertices
		int point1 = 3 * cylinderElements[i];     // slots 0, 1, 2
		int point2 = 3 * cylinderElements[i + 1]; // slots 3, 4, 5
		int point3 = 3 * cylinderElements[i + 2]; // slots 6, 7, 8

		Vertex p1 = { cylinderVertices[point1 + 0],
					  cylinderVertices[point1 + 1],
					  cylinderVertices[point1 + 2] };

		Vertex p2 = { cylinderVertices[point2 + 0],
					  cylinderVertices[point2 + 1],
					  cylinderVertices[point2 + 2] };

		Vertex p3 = { cylinderVertices[point3 + 0],
					  cylinderVertices[point3 + 1],
					  cylinderVertices[point3 + 2] };

		// Calculate the base indices of the three normals
		int normal1 = 3 * cylinderElements[i];     // slots 0, 1, 2
		int normal2 = 3 * cylinderElements[i + 1]; // slots 3, 4, 5
		int normal3 = 3 * cylinderElements[i + 2]; // slots 6, 7, 8

		Normal n1 = { cylinderVertices[normal1 + 0],
					  cylinderVertices[normal1 + 1],
					  cylinderVertices[normal1 + 2] };

		Normal n2 = { cylinderVertices[normal2 + 0],
					  cylinderVertices[normal2 + 1],
					  cylinderVertices[normal2 + 2] };

		Normal n3 = { cylinderVertices[normal3 + 0],
					  cylinderVertices[normal3 + 1],
					  cylinderVertices[normal3 + 2] };

		// Add triangle and vertex normals
		C.addTriangleWithNorms(p1, n1, p2, n2, p3, n3);
	}
}

///
// drawCylinder
//
// Invoked whenever the Cylinder must be redrawn
//
// @param pshader - shader program for Phong shading
// @param tshader - shader program for texture mapping
// @param bset    - the BufferSet containing the object's data
///
void drawCylinder(int obj, GLuint pshader, BufferSet &bset) {

	// extern declarations for things defined in the main
	// program source file that we need to use here
	extern GLfloat angles;
	extern GLfloat xlate[3];

	// by default, the sphere is drawn using Phong shading.

	if (obj == OBJ_VASE) {
		glUseProgram(pshader);

		// set up viewing and projection parameters
		setUpProjection(pshader);


		// set up the Phong shading information
		setUpPhong(pshader, OBJ_VASE);

		// set up the camera
		setUpCamera(pshader,
			Tuple{ 0.0f, 1.0f, 10.0f },
			Tuple{ 0.0f, 0.0f, 0.0f },
			Tuple{ 0.0f, 1.0f, 0.0f }
		);

		setUpTransforms(pshader,
			Tuple{ 0.4f, 0.9f, 0.2f },
			Tuple{ angles, angles + 180, angles },
			Tuple{ xlate[0]- (float) 0.65, xlate[1] - (float) 2.5, xlate[2] + (float) 6.3}
		);
	}

	if (obj == OBJ_STICK) {
		glUseProgram(pshader);

		// set up viewing and projection parameters
		setUpProjection(pshader);


		// set up the Phong shading information
		setUpPhong(pshader, OBJ_STICK);

		// set up the camera
		setUpCamera(pshader,
			Tuple{ 0.0f, 1.0f, 10.0f },
			Tuple{ 0.0f, 0.0f, 0.0f },
			Tuple{ 0.0f, 1.0f, 0.0f }
		);

		setUpTransforms(pshader,
			Tuple{ 0.1f, 0.6f, 0.1f },
			Tuple{ angles, angles, angles },
			Tuple{ xlate[0] - (float) 2.0, xlate[1] - (float) 2.5, xlate[2] + (float) 6.3 }
		);
	}

	if (obj == OBJ_CANDLE) {
		glUseProgram(pshader);

		// set up viewing and projection parameters
		setUpProjection(pshader);


		// set up the Phong shading information
		setUpPhong(pshader, OBJ_CANDLE);

		// set up the camera
		setUpCamera(pshader,
			Tuple{ 0.0f, 1.0f, 10.0f },
			Tuple{ 0.0f, 0.0f, 0.0f },
			Tuple{ 0.0f, 1.0f, 0.0f }
		);

		setUpTransforms(pshader,
			Tuple{ 0.05f, 0.3f, 0.05f },
			Tuple{ angles, angles, angles },
			Tuple{ xlate[0] - (float) 2.0, xlate[1] - (float) 2.1, xlate[2] + (float) 6.3 }
		);
	}

	if (obj == OBJ_NECK) {
		glUseProgram(pshader);

		// set up viewing and projection parameters
		setUpProjection(pshader);


		// set up the Phong shading information
		setUpPhong(pshader, OBJ_VASE);

		// set up the camera
		setUpCamera(pshader,
			Tuple{ 0.0f, 1.0f, 10.0f },
			Tuple{ 0.0f, 0.0f, 0.0f },
			Tuple{ 0.0f, 1.0f, 0.0f }
		);

		setUpTransforms(pshader,
			Tuple{ 0.2f, 0.4f, 0.1f },
			Tuple{ angles, angles + 180, angles },
			Tuple{ xlate[0] - (float) 0.65, xlate[1] - (float) 2.0, xlate[2] + (float) 6.3 }
		);
	}

	if (obj == OBJ_PLATE) {
		glUseProgram(pshader);

		// set up viewing and projection parameters
		setUpProjection(pshader);


		// set up the Phong shading information
		setUpPhong(pshader, OBJ_PLATE);

		// set up the camera
		setUpCamera(pshader,
			Tuple{ 0.0f, 1.0f, 10.0f },
			Tuple{ 0.0f, 0.0f, 0.0f },
			Tuple{ 0.0f, 1.0f, 0.0f }
		);

		setUpTransforms(pshader,
			Tuple{ 0.4f, 0.02f, 0.2f },
			Tuple{ angles, angles + 180, angles },
			Tuple{ xlate[0] - (float) 1.2, xlate[1] - (float) 2.5, xlate[2] + (float) 7.3 }
		);
	}

	if (obj == OBJ_CAKE) {
		glUseProgram(pshader);

		// set up viewing and projection parameters
		setUpProjection(pshader);


		// set up the Phong shading information
		setUpPhong(pshader, OBJ_CAKE);

		// set up the camera
		setUpCamera(pshader,
			Tuple{ 0.0f, 1.0f, 10.0f },
			Tuple{ 0.0f, 0.0f, 0.0f },
			Tuple{ 0.0f, 1.0f, 0.0f }
		);

		setUpTransforms(pshader,
			Tuple{ 0.2f, 0.15f, 0.1f },
			Tuple{ angles, angles + 180, angles },
			Tuple{ xlate[0] - (float) 1.2, xlate[1] - (float) 2.4, xlate[2] + (float) 7.3 }
		);
	}

		



	// By default, the sphere is drawn using Phong shading.
	// IF YOU ARE DOING THE EXTRA-CREDIT OPTION, you must replace
	// the last NULL parameter with a string containing the name of
	// the texture coordinate attribute variable, "vTexCoord", and
	// you must use the texture shader here.
	bset.selectBuffers(pshader, "vPosition", NULL, "vNormal", NULL);

	// draw it
	glDrawElements(GL_TRIANGLES, bset.numElements,
		GL_UNSIGNED_INT, (void *)0);

}
